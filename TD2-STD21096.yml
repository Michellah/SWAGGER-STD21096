openapi: 3.0.1
info:
  title: STD21096-TD2
  description: TD2
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
# Added by API Auto Mocking Plugin
- description: SwaggerHub API Auto Mocking
  url: https://STD21096.com
tags:
- name: Room
- name: Films
- name: Projections
- name: Categories
paths:
  /room:
    get:
      tags:
        - "Room"
      summary: Get all Rooms
      operationId: getRooms
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Room'
        400:
          description: Error
          content: {}
    post:
      tags:
        - "Room"
      summary: Create a new room
      operationId: createRooms
      responses:
        200: 
          description: Success
          content:
            application/json:
              schema: 
                type: array
                items:
                  $ref: '#/components/schemas/NewRoom'
        404:
          description: Bad request
          content: {}
    delete:
      tags:
        - "Room"
      summary: deletes room by referring to its id
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: "Returns the id of the deleted rooms"
        400:
          description: Error
          content: {}
    patch:
      tags:
        - "Room"
      summary: Update in rooms
      operationId: updateRooms  
      description: | 
        Possible changes on capacity of rooms
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewRoom'
            examples:
              changeFilm:
                summary: Change capacity of rooms
                value:
                - id: C
                  capacity: 50
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewRoom'      
  /room/{id}:
    get:
      tags:
        - "Room"
      summary: get the room by specified id
      operationId: getRoom
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
  /films:
    get:
      tags:
        - "Films"
      summary: Get all Films
      operationId: getFilms
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Film'
        400:
          description: Error
          content: {}
    put:
      tags:
        - "Films"
      summary: modifies entirely a film list
      requestBody:
        description: new film
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewFilm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Film'
        400:
          description: Error
          content: {}
    post: 
      tags:
        - "Films"
      summary: create a new film
      operationId: createFilm
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/NewFilm'
        400:
          description: Error
          content: {}
  /films/{id}:
    get:
      tags:
        - "Films"
      summary: get the film by specified id
      operationId: getFilm
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        400:
          description: Error
          content: {}
    put:
      tags:
        - "Films"
      summary: allows you to modify film data except its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        description: new film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewFilm'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Film'
        400:
          description: Error
          content: {}
    delete:
      tags:
        - "Films"
      summary: deletes a film by referring to its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: "Returns the id of the deleted student"

        400:
          description: Error
          content: {}
  /projections:
    get:
      tags:
        - "Projections"
      summary: Get all projections
      operationId: getProjections
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: '#/components/schemas/Projection'
        400:
          description: Error
          content: {}
    put:
      tags:
        - "Projections"
      summary: modifies entirely a Projection list
      requestBody:
        description: new film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Projection'
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: "Returns modified"
        400:
          description: Error
          content: {}
    post:
      tags:
        - "Projections"
      summary: creates a new Projection
      requestBody:
        required: true
        description: new film
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjection'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projection'
        400:
          description: Error
          content: {}
    patch:
      tags:
        - "Projections"
      description: | 
        Possible changes on:
        * film: change
        * room: change
        * hour: change hour
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Projection'
            examples:
              changeFilm:
                summary: Change some films
                value:
                - id: 1
                  filmId: 1
                - id: 2
                  filmId: 2
              changeRoom:
                summary: Change room
                value:
                - id: 1
                  roomId: B
                - id: 2
                  roomId: B
              changeHour:
                summary: Change hour
                value:
                - id: 1
                  projectionId: 5
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Projection'
  /projections/{id}:
    get:
      tags:
        - "Projections"
      summary: get the projection by specified id
      operationId: getProjection
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projection'
        400:
          description: Error
          content: {}
    put:
      tags:
        - "Projections"
      summary: allows you to modify projection data except its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        required: true
        description: new projection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProjection'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projection'
        400:
          description: Error
          content: {}
    delete:
      tags:
        - "Projections"
      summary: deletes a projection by referring to its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: "Returns the id of the deleted projection"

        400:
          description: Error
          content: {}
  /Categories:
    get:
      tags:
        - "Categories"
      summary: Get all Categories of movies
      description: Get all category of movies
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400: 
          description: Error
          content: {}
    post:
      tags:
        - "Categories"
      summary: creates a new category
      requestBody:
        required: true
        description: new category
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projection'
        400:
          description: Error
          content: {}
    delete:
      tags:
        - "Categories"
      summary: deletes a projection by referring to its id
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            text/plain:
              schema:
                type: string
                example: "Returns the id of the deleted projection"
        400:
          description: Error
          content: {}      
  /categories/{id}:
    get:
      tags:
        - "Categories"
      summary: Get the category by specified name
      description: Get the category by specified name
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        400: 
          description: Error
          content: {} 
    patch:
      tags:
        - "Categories"
      description: | 
        Possible changes on:
        * film: add
        * film: change
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NewCategory'
            examples:
              changeFilm:
                summary: Change some films
                value:
                - id: 1
                  filmId: 1
              addFilm:
                summary: Add film
                value:
                - idFilm: 10
                  name: Mission impossible      
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NewCategory' 
                  
components:
  schemas:
    Category:
      type: object
      properties:
        idCategory: 
          type: integer
          example: 1
        name: 
          type: string
          example: Drama
    NewCategory:
      type: object
      properties:
        name:
          type: string
          example: Action
        film: 
          type: object
          properties:
            idFilm: 
              type: integer
              example: 10
            name:
              type: string
              example: no time to die
    Room:
      type: object
      properties:
        id:
          type: string
          example: 'A'
        capacity:
          type: number
          example: 30
    NewRoom:
      type: object
      properties:
        id:
          type: string
          example: 'C'
        capacity:
          type: number
          example: 50
    NewFilm:
      type: object
      properties:
        title:
          type: string
        duration:
          type: string
        summary:
          type: string
        director:
          type: string
        date:
          type: string
          format: date
    Film:
      type: object
      properties:
        id:
          type: number
      allOf:
        - $ref: '#/components/schemas/NewFilm'
    NewProjection:
      type: object
      properties:
        filmId:
          type: integer
          example: 1
        roomId:
          type: string
          default: A
          enum:
            - A
            - B
        hour:
          type: string
          format: date-time
    Projection:
      allOf:
        - $ref: '#/components/schemas/Film'
        - $ref: '#/components/schemas/Room'
      type: object
      properties:
        hour:
          type: string
          format: date-time
        id:
          type: number
          example: '1'